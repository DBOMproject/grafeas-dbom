// Code generated by go-swagger; DO NOT EDIT.

package asset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryAssetsParams creates a new QueryAssetsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryAssetsParams() *QueryAssetsParams {
	return &QueryAssetsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryAssetsParamsWithTimeout creates a new QueryAssetsParams object
// with the ability to set a timeout on a request.
func NewQueryAssetsParamsWithTimeout(timeout time.Duration) *QueryAssetsParams {
	return &QueryAssetsParams{
		timeout: timeout,
	}
}

// NewQueryAssetsParamsWithContext creates a new QueryAssetsParams object
// with the ability to set a context for a request.
func NewQueryAssetsParamsWithContext(ctx context.Context) *QueryAssetsParams {
	return &QueryAssetsParams{
		Context: ctx,
	}
}

// NewQueryAssetsParamsWithHTTPClient creates a new QueryAssetsParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryAssetsParamsWithHTTPClient(client *http.Client) *QueryAssetsParams {
	return &QueryAssetsParams{
		HTTPClient: client,
	}
}

/* QueryAssetsParams contains all the parameters to send to the API endpoint
   for the query assets operation.

   Typically these are written to a http.Request.
*/
type QueryAssetsParams struct {

	/* ChannelID.

	   Channel ID
	*/
	ChannelID string

	/* Fields.

	   Fields to return
	*/
	Fields *string

	/* Limit.

	   Pagination limit
	*/
	Limit *int64

	/* Query.

	   Query
	*/
	Query string

	/* RepoID.

	   Repository ID
	*/
	RepoID string

	/* Skip.

	   Pagination skip
	*/
	Skip *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query assets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryAssetsParams) WithDefaults() *QueryAssetsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query assets params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryAssetsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query assets params
func (o *QueryAssetsParams) WithTimeout(timeout time.Duration) *QueryAssetsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query assets params
func (o *QueryAssetsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query assets params
func (o *QueryAssetsParams) WithContext(ctx context.Context) *QueryAssetsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query assets params
func (o *QueryAssetsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query assets params
func (o *QueryAssetsParams) WithHTTPClient(client *http.Client) *QueryAssetsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query assets params
func (o *QueryAssetsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannelID adds the channelID to the query assets params
func (o *QueryAssetsParams) WithChannelID(channelID string) *QueryAssetsParams {
	o.SetChannelID(channelID)
	return o
}

// SetChannelID adds the channelId to the query assets params
func (o *QueryAssetsParams) SetChannelID(channelID string) {
	o.ChannelID = channelID
}

// WithFields adds the fields to the query assets params
func (o *QueryAssetsParams) WithFields(fields *string) *QueryAssetsParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the query assets params
func (o *QueryAssetsParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithLimit adds the limit to the query assets params
func (o *QueryAssetsParams) WithLimit(limit *int64) *QueryAssetsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the query assets params
func (o *QueryAssetsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithQuery adds the query to the query assets params
func (o *QueryAssetsParams) WithQuery(query string) *QueryAssetsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the query assets params
func (o *QueryAssetsParams) SetQuery(query string) {
	o.Query = query
}

// WithRepoID adds the repoID to the query assets params
func (o *QueryAssetsParams) WithRepoID(repoID string) *QueryAssetsParams {
	o.SetRepoID(repoID)
	return o
}

// SetRepoID adds the repoId to the query assets params
func (o *QueryAssetsParams) SetRepoID(repoID string) {
	o.RepoID = repoID
}

// WithSkip adds the skip to the query assets params
func (o *QueryAssetsParams) WithSkip(skip *int64) *QueryAssetsParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the query assets params
func (o *QueryAssetsParams) SetSkip(skip *int64) {
	o.Skip = skip
}

// WriteToRequest writes these params to a swagger request
func (o *QueryAssetsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param channelID
	if err := r.SetPathParam("channelID", o.ChannelID); err != nil {
		return err
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string

		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {

			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {

		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	// path param repoID
	if err := r.SetPathParam("repoID", o.RepoID); err != nil {
		return err
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int64

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt64(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
