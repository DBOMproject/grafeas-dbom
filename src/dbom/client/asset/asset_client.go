// Code generated by go-swagger; DO NOT EDIT.

package asset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new asset API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asset API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAsset(params *AddAssetParams, opts ...ClientOption) (*AddAssetCreated, error)

	AttachSubAsset(params *AttachSubAssetParams, opts ...ClientOption) (*AttachSubAssetOK, error)

	AuditAsset(params *AuditAssetParams, opts ...ClientOption) (*AuditAssetOK, error)

	DetachSubasset(params *DetachSubassetParams, opts ...ClientOption) (*DetachSubassetOK, error)

	ExportAsset(params *ExportAssetParams, opts ...ClientOption) (*ExportAssetOK, error)

	ExportFileAsset(params *ExportFileAssetParams, opts ...ClientOption) (*ExportFileAssetOK, error)

	GetChannels(params *GetChannelsParams, opts ...ClientOption) (*GetChannelsOK, error)

	QueryAssets(params *QueryAssetsParams, opts ...ClientOption) (*QueryAssetsOK, error)

	QueryAssetsPost(params *QueryAssetsPostParams, opts ...ClientOption) (*QueryAssetsPostOK, error)

	RetrieveAsset(params *RetrieveAssetParams, opts ...ClientOption) (*RetrieveAssetOK, error)

	RetrieveAssets(params *RetrieveAssetsParams, opts ...ClientOption) (*RetrieveAssetsOK, error)

	TransferAsset(params *TransferAssetParams, opts ...ClientOption) (*TransferAssetOK, error)

	UpdateAsset(params *UpdateAssetParams, opts ...ClientOption) (*UpdateAssetOK, error)

	ValidateAsset(params *ValidateAssetParams, opts ...ClientOption) (*ValidateAssetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAsset adds an asset
*/
func (a *Client) AddAsset(params *AddAssetParams, opts ...ClientOption) (*AddAssetCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddAsset",
		Method:             "POST",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAssetCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AttachSubAsset attaches a sub asset
*/
func (a *Client) AttachSubAsset(params *AttachSubAssetParams, opts ...ClientOption) (*AttachSubAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachSubAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AttachSubAsset",
		Method:             "POST",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AttachSubAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AttachSubAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AttachSubAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AuditAsset gets the audit trail of an asset
*/
func (a *Client) AuditAsset(params *AuditAssetParams, opts ...ClientOption) (*AuditAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuditAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AuditAsset",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/trail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AuditAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AuditAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AuditAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetachSubasset detaches a subasset
*/
func (a *Client) DetachSubasset(params *DetachSubassetParams, opts ...ClientOption) (*DetachSubassetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachSubassetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DetachSubasset",
		Method:             "POST",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetachSubassetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetachSubassetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DetachSubasset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportAsset exports an asset
*/
func (a *Client) ExportAsset(params *ExportAssetParams, opts ...ClientOption) (*ExportAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportAsset",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportFileAsset exports an asset
*/
func (a *Client) ExportFileAsset(params *ExportFileAssetParams, opts ...ClientOption) (*ExportFileAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportFileAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportFileAsset",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/export/{fileName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportFileAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportFileAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportFileAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChannels lists channels
*/
func (a *Client) GetChannels(params *GetChannelsParams, opts ...ClientOption) (*GetChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChannelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetChannels",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChannelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChannelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetChannels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryAssets queries assets
*/
func (a *Client) QueryAssets(params *QueryAssetsParams, opts ...ClientOption) (*QueryAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryAssets",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  QueryAssetsPost queries assets
*/
func (a *Client) QueryAssetsPost(params *QueryAssetsPostParams, opts ...ClientOption) (*QueryAssetsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueryAssetsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QueryAssetsPost",
		Method:             "POST",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/_query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QueryAssetsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QueryAssetsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for QueryAssetsPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveAsset retrieves an asset
*/
func (a *Client) RetrieveAsset(params *RetrieveAssetParams, opts ...ClientOption) (*RetrieveAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RetrieveAsset",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RetrieveAssets lists assets
*/
func (a *Client) RetrieveAssets(params *RetrieveAssetsParams, opts ...ClientOption) (*RetrieveAssetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetrieveAssetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RetrieveAssets",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RetrieveAssetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RetrieveAssetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RetrieveAssets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TransferAsset transfers an asset
*/
func (a *Client) TransferAsset(params *TransferAssetParams, opts ...ClientOption) (*TransferAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTransferAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TransferAsset",
		Method:             "POST",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/transfer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TransferAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TransferAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for TransferAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateAsset updates asset
*/
func (a *Client) UpdateAsset(params *UpdateAssetParams, opts ...ClientOption) (*UpdateAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateAsset",
		Method:             "PUT",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateAsset validates the manufacturer signature
*/
func (a *Client) ValidateAsset(params *ValidateAssetParams, opts ...ClientOption) (*ValidateAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ValidateAsset",
		Method:             "GET",
		PathPattern:        "/repo/{repoID}/chan/{channelID}/asset/{assetID}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAssetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ValidateAsset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
