// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachSubAssetRequest AttachSubAssetRequest
// Example: {"assetID":"ABC02","channelID":"C1","repoID":"DB1","role":"InternalMemory","subRole":"L3Cache"}
//
// swagger:model AttachSubAssetRequest
type AttachSubAssetRequest struct {

	// asset ID
	// Required: true
	AssetID *string `json:"assetID"`

	// channel ID
	// Required: true
	ChannelID *string `json:"channelID"`

	// repo ID
	// Required: true
	RepoID *string `json:"repoID"`

	// role
	// Required: true
	Role *string `json:"role"`

	// sub role
	// Required: true
	SubRole *string `json:"subRole"`
}

// Validate validates this attach sub asset request
func (m *AttachSubAssetRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepoID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachSubAssetRequest) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("assetID", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *AttachSubAssetRequest) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("channelID", "body", m.ChannelID); err != nil {
		return err
	}

	return nil
}

func (m *AttachSubAssetRequest) validateRepoID(formats strfmt.Registry) error {

	if err := validate.Required("repoID", "body", m.RepoID); err != nil {
		return err
	}

	return nil
}

func (m *AttachSubAssetRequest) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *AttachSubAssetRequest) validateSubRole(formats strfmt.Registry) error {

	if err := validate.Required("subRole", "body", m.SubRole); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attach sub asset request based on context it is used
func (m *AttachSubAssetRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AttachSubAssetRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachSubAssetRequest) UnmarshalBinary(b []byte) error {
	var res AttachSubAssetRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
