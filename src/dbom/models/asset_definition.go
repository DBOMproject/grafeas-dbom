// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetDefinition AssetDefinition
// Example: {"assetDescription":"Core i5 3500k Desktop Processor","assetManufacturer":"Intel Corporation","assetMetadata":{"clockSpeed":"3.4Ghz","cpuSocket":"LGA 1151","packageWattage":"65","packageWeight":"340g","physicalCoreCount":"4","supportedMemoryType":"DDR4SDRAM"},"assetModelNumber":"BX80677I57500","assetSubType":"CPUUnit","assetType":"HardwareComponent","documentCreatedDate":"2020-03-19","documentCreator":"Intel FAB California","documentName":"BoM for CPU Core i5 3500k","manufactureSignature":"wsBcBAEBCAAQBQJecxBBCRDhB93OjBXccAAAlAQH/0N2HhaK6fmADG0QxK9i8xIrgncGzvii6OqPzyVtyjA7RrpgA1c5E5wN5eW8XmPaqpMvtP3RenuTlXTH2d647QnzdxYuNOKjVXGuweBMkBqnKBf8hHeH6adBTh6Jlnbt3OndMsE06BMBz59Z/X4tmKoAWXox1EPraAi9+A6BqeB5YHXDQJ6SXsW9fLKoQVECsi0MHOR+CjGcu1R1dyP5s2Vd9jcm+DLXLmxz6zTqS7h1neLMsFm4jIhxYsh5mQ49R4r6Yi76RIMK5G6LxX32BzKb9rTDSKdqRFQAv4JsoZXTPRwlM3MG/FCQWYhtvc6righlAMJOVSXTxy54TPKeXe4==SVL1","standardVersion":1}
//
// swagger:model AssetDefinition
type AssetDefinition struct {

	// asset description
	// Required: true
	AssetDescription *string `json:"assetDescription"`

	// asset manufacturer
	// Required: true
	AssetManufacturer *string `json:"assetManufacturer"`

	// asset metadata
	// Required: true
	AssetMetadata interface{} `json:"assetMetadata"`

	// asset model number
	// Required: true
	AssetModelNumber *string `json:"assetModelNumber"`

	// asset sub type
	// Required: true
	AssetSubType *string `json:"assetSubType"`

	// asset type
	// Required: true
	AssetType *string `json:"assetType"`

	// document created date
	// Required: true
	DocumentCreatedDate *string `json:"documentCreatedDate"`

	// document creator
	// Required: true
	DocumentCreator *string `json:"documentCreator"`

	// document name
	// Required: true
	DocumentName *string `json:"documentName"`

	// manufacture signature
	// Required: true
	ManufactureSignature *string `json:"manufactureSignature"`

	// standard version
	// Required: true
	StandardVersion *float64 `json:"standardVersion"`
}

// Validate validates this asset definition
func (m *AssetDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetManufacturer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetModelNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetSubType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManufactureSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetDefinition) validateAssetDescription(formats strfmt.Registry) error {

	if err := validate.Required("assetDescription", "body", m.AssetDescription); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateAssetManufacturer(formats strfmt.Registry) error {

	if err := validate.Required("assetManufacturer", "body", m.AssetManufacturer); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateAssetMetadata(formats strfmt.Registry) error {

	if m.AssetMetadata == nil {
		return errors.Required("assetMetadata", "body", nil)
	}

	return nil
}

func (m *AssetDefinition) validateAssetModelNumber(formats strfmt.Registry) error {

	if err := validate.Required("assetModelNumber", "body", m.AssetModelNumber); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateAssetSubType(formats strfmt.Registry) error {

	if err := validate.Required("assetSubType", "body", m.AssetSubType); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateAssetType(formats strfmt.Registry) error {

	if err := validate.Required("assetType", "body", m.AssetType); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateDocumentCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("documentCreatedDate", "body", m.DocumentCreatedDate); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateDocumentCreator(formats strfmt.Registry) error {

	if err := validate.Required("documentCreator", "body", m.DocumentCreator); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateDocumentName(formats strfmt.Registry) error {

	if err := validate.Required("documentName", "body", m.DocumentName); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateManufactureSignature(formats strfmt.Registry) error {

	if err := validate.Required("manufactureSignature", "body", m.ManufactureSignature); err != nil {
		return err
	}

	return nil
}

func (m *AssetDefinition) validateStandardVersion(formats strfmt.Registry) error {

	if err := validate.Required("standardVersion", "body", m.StandardVersion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this asset definition based on context it is used
func (m *AssetDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AssetDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetDefinition) UnmarshalBinary(b []byte) error {
	var res AssetDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
